Skip to content
Chat history

You said:
what is terraform workspace please explain for beginners with simple real time AWS use case.
ChatGPT said:
Great question 👍 Let’s go step by step in very simple beginner-friendly language.

🌍 What is a Terraform Workspace?
Think of Terraform workspaces as separate folders inside the same Terraform project, where each folder can have its own state file (terraform.tfstate).

By default, Terraform creates a workspace called default.

If you create new workspaces (dev, qa, prod), each will have its own isolated state file, so your resources don’t clash.

👉 In short: Workspaces allow you to use the same Terraform code to create separate environments (like dev, staging, prod) without interfering with each other.

🏗 Real-time AWS Example
Imagine you are a DevOps Engineer and your company wants 3 environments on AWS:

Development (dev) → small EC2 instance (t2.micro)

Testing (qa) → medium EC2 instance (t3.small)

Production (prod) → large EC2 instance (t3.large)

Instead of writing 3 separate Terraform projects, you can use workspaces.

Step 1: Write a single Terraform file (main.tf)
provider "aws" {
  region = "us-east-1"
}

variable "instance_type" {
  default = "t2.micro"
}

resource "aws_instance" "my_ec2" {
  ami           = "ami-0c55b159cbfafe1f0" # Example Amazon Linux AMI
  instance_type = var.instance_type
  tags = {
    Name = "MyEC2-${terraform.workspace}"
  }
}
🔎 Explanation:

terraform.workspace → gives current workspace name (dev, qa, prod).

Tagging the instance with ${terraform.workspace} helps identify which environment the instance belongs to.

Step 2: Initialize Terraform
terraform init
Step 3: Create Workspaces
terraform workspace new dev
terraform workspace new qa
terraform workspace new prod
Now you have 3 workspaces → each with its own state file.

Step 4: Use Different Variables Per Workspace
You can define different instance types for each workspace using terraform.tfvars files:

dev.tfvars

instance_type = "t2.micro"
qa.tfvars

instance_type = "t3.small"
prod.tfvars

instance_type = "t3.large"
Step 5: Deploy for Each Workspace
terraform workspace select dev
terraform apply -var-file=dev.tfvars

terraform workspace select qa
terraform apply -var-file=qa.tfvars

terraform workspace select prod
terraform apply -var-file=prod.tfvars
🎯 Real-life Benefit
No resource clash: Dev, QA, and Prod don’t overwrite each other because they have separate state files.

Same code, multiple environments: No need to copy-paste Terraform files.

Easy management: You just switch workspaces and apply.

👉 Example: If you run terraform destroy in dev, it will only destroy dev EC2 instance, not qa or prod.

✅ In short:
Terraform Workspaces = Different environments (dev, qa, prod) from the same code, with separate state files.

Do you want me to also show you how to check which workspace you are currently in and where Terraform stores these state files?

You said:
yes
ChatGPT said:
Perfect 👍 Let’s go deeper.

🔍 How to check which workspace you are in?
Run:

terraform workspace show
👉 Output:

dev
That means you are currently in the dev workspace.

📋 How to list all available workspaces?
terraform workspace list
👉 Output:

  default
* dev
  qa
  prod
* means the current active workspace.

default is always present by default.

📂 Where does Terraform store state files per workspace?
By default, Terraform stores state files locally in the .terraform folder inside your project.

For example:

.terraform/
   └── terraform.tfstate.d/
        ├── dev/
        │   └── terraform.tfstate
        ├── qa/
        │   └── terraform.tfstate
        ├── prod/
        │   └── terraform.tfstate
👉 Each workspace has its own terraform.tfstate file.

🏗 Example Workflow in AWS
Start in dev:

terraform workspace select dev
terraform apply -var-file=dev.tfvars
✅ Creates EC2 instance for Dev.

Switch to qa:

terraform workspace select qa
terraform apply -var-file=qa.tfvars
✅ Creates separate EC2 instance for QA.

Switch to prod:

terraform workspace select prod
terraform apply -var-file=prod.tfvars
✅ Creates separate EC2 instance for Prod.

🎯 Why this is useful in real projects?
Developers can test in dev without touching prod.

QA team can validate in qa environment.

Production remains safe.

All of this is managed with one Terraform codebase.

👉 Quick Recap:

terraform workspace show → check current workspace.

terraform workspace list → see all workspaces.

.terraform/terraform.tfstate.d/ → where state files are stored.

Do you want me to also explain how remote backends (like S3 in AWS) store these workspace states (instead of local machine)? That’s what’s usually done in companies.

You said:
in if we not using worspace we only used default then terraform is not create terraform.tfstate.d instaed it create terraform.tfstate in current terraform folder?
ChatGPT said:
Exactly ✅ You’ve got it right!

Let’s make it crystal clear:

📂 Case 1: When you use only the default workspace
Terraform does not create the terraform.tfstate.d folder.

Instead, it just creates a single terraform.tfstate file in your working directory.

Example:

my-terraform-project/
   ├── main.tf
   ├── variables.tf
   ├── terraform.tfstate   👈 state file for default workspace
   └── terraform.tfstate.backup
👉 All resources (dev, qa, prod, etc.) would share this one state file if you don’t separate them, which can cause conflicts.

📂 Case 2: When you use multiple workspaces
Terraform creates a folder .terraform/terraform.tfstate.d/

Inside it, each workspace gets its own folder with its own state file.

Example:

my-terraform-project/
   ├── main.tf
   ├── variables.tf
   ├── .terraform/
   │     └── terraform.tfstate.d/
   │           ├── dev/
   │           │    └── terraform.tfstate
   │           ├── qa/
   │           │    └── terraform.tfstate
   │           └── prod/
   │                └── terraform.tfstate
👉 This way, each environment (workspace) is isolated.

🔑 Key Point
Default workspace → terraform.tfstate in current folder.

Custom workspaces → terraform.tfstate.d/<workspace-name>/terraform.tfstate inside .terraform.

⚡ Real-world risk:
If you only use default workspace, and try to deploy dev, qa, and prod from the same code → they will overwrite each other in the same terraform.tfstate. That’s why workspaces (or separate folders/repos) are used for environments.

Do you want me to also show you how companies use S3 backend in AWS so that even these terraform.tfstate files are stored centrally (instead of on your laptop)?




No file chosenNo file chosen
ChatGPT can make mistakes. Check important info. See Cookie Preferences.

